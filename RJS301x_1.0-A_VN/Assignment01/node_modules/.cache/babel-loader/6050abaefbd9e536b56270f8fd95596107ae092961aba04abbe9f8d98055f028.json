{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\r\n * @name formatRFC3339\r\n * @category Common Helpers\r\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\r\n *\r\n * @description\r\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {Object} [options] - an object with options.\r\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\r\n * @returns {String} the formatted date string\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 3339 format:\r\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18T19:00:52Z'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\r\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\r\n * //=> '2019-09-18T19:00:52.23Z'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\r\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\r\n * //=> '2019-09-18T19:00:52.234Z'\r\n */\nexport default function formatRFC3339(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n  var originalDate = toDate(dirtyDate);\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n  var _ref = dirtyOptions || {},\n    _ref$fractionDigits = _ref.fractionDigits,\n    fractionDigits = _ref$fractionDigits === void 0 ? 0 : _ref$fractionDigits; // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n  var day = addLeadingZeros(originalDate.getDate(), 2);\n  var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = addLeadingZeros(originalDate.getHours(), 2);\n  var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = addLeadingZeros(toInteger(absoluteOffset / 60), 2);\n    var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}","map":{"version":3,"names":["toDate","isValid","addLeadingZeros","toInteger","formatRFC3339","dirtyDate","dirtyOptions","arguments","length","TypeError","concat","originalDate","RangeError","_ref","_ref$fractionDigits","fractionDigits","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","fractionalSecond","milliseconds","getMilliseconds","fractionalSeconds","Math","floor","pow","offset","tzOffset","getTimezoneOffset","absoluteOffset","abs","hourOffset","minuteOffset","sign"],"sources":["C:/Users/POSEIDON/Desktop/Funix/Fnuix/RJS301x_1.0-A_VN/Assignment01/node_modules/date-fns/esm/formatRFC3339/index.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport isValid from \"../isValid/index.js\";\r\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\r\nimport toInteger from \"../_lib/toInteger/index.js\";\r\n\r\n/**\r\n * @name formatRFC3339\r\n * @category Common Helpers\r\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\r\n *\r\n * @description\r\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {Object} [options] - an object with options.\r\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\r\n * @returns {String} the formatted date string\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 3339 format:\r\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18T19:00:52Z'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\r\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\r\n * //=> '2019-09-18T19:00:52.23Z'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\r\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\r\n * //=> '2019-09-18T19:00:52.234Z'\r\n */\r\nexport default function formatRFC3339(dirtyDate, dirtyOptions) {\r\n  if (arguments.length < 1) {\r\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\r\n  }\r\n\r\n  var originalDate = toDate(dirtyDate);\r\n\r\n  if (!isValid(originalDate)) {\r\n    throw new RangeError('Invalid time value');\r\n  }\r\n\r\n  var _ref = dirtyOptions || {},\r\n      _ref$fractionDigits = _ref.fractionDigits,\r\n      fractionDigits = _ref$fractionDigits === void 0 ? 0 : _ref$fractionDigits; // Test if fractionDigits is between 0 and 3 _and_ is not NaN\r\n\r\n\r\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\r\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\r\n  }\r\n\r\n  var day = addLeadingZeros(originalDate.getDate(), 2);\r\n  var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\r\n  var year = originalDate.getFullYear();\r\n  var hour = addLeadingZeros(originalDate.getHours(), 2);\r\n  var minute = addLeadingZeros(originalDate.getMinutes(), 2);\r\n  var second = addLeadingZeros(originalDate.getSeconds(), 2);\r\n  var fractionalSecond = '';\r\n\r\n  if (fractionDigits > 0) {\r\n    var milliseconds = originalDate.getMilliseconds();\r\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\r\n    fractionalSecond = '.' + addLeadingZeros(fractionalSeconds, fractionDigits);\r\n  }\r\n\r\n  var offset = '';\r\n  var tzOffset = originalDate.getTimezoneOffset();\r\n\r\n  if (tzOffset !== 0) {\r\n    var absoluteOffset = Math.abs(tzOffset);\r\n    var hourOffset = addLeadingZeros(toInteger(absoluteOffset / 60), 2);\r\n    var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\r\n\r\n    var sign = tzOffset < 0 ? '+' : '-';\r\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\r\n  } else {\r\n    offset = 'Z';\r\n  }\r\n\r\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}