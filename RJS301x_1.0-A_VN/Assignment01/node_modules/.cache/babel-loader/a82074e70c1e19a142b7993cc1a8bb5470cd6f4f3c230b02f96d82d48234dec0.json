{"ast":null,"code":"import eachWeekendOfInterval from \"../eachWeekendOfInterval/index.js\";\nimport startOfYear from \"../startOfYear/index.js\";\nimport endOfYear from \"../endOfYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name eachWeekendOfYear\r\n * @category Year Helpers\r\n * @summary List all the Saturdays and Sundays in the year.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the year.\r\n *\r\n * @param {Date|Number} date - the given year\r\n * @returns {Date[]} an array containing all the Saturdays and Sundays\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The passed date is invalid\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the year\r\n * var result = eachWeekendOfYear(new Date(2020, 1, 1))\r\n * //=> [\r\n * //   Sat Jan 03 2020 00:00:00,\r\n * //   Sun Jan 04 2020 00:00:00,\r\n * //   ...\r\n * //   Sun Dec 27 2020 00:00:00\r\n * // ]\r\n * ]\r\n */\n\nexport default function eachWeekendOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfYear(dirtyDate);\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\n  var endDate = endOfYear(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","map":{"version":3,"names":["eachWeekendOfInterval","startOfYear","endOfYear","requiredArgs","eachWeekendOfYear","dirtyDate","arguments","startDate","isNaN","RangeError","endDate","start","end"],"sources":["C:/Users/POSEIDON/Desktop/Funix/Fnuix/RJS301x_1.0-A_VN/Assignment01/node_modules/date-fns/esm/eachWeekendOfYear/index.js"],"sourcesContent":["import eachWeekendOfInterval from \"../eachWeekendOfInterval/index.js\";\r\nimport startOfYear from \"../startOfYear/index.js\";\r\nimport endOfYear from \"../endOfYear/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name eachWeekendOfYear\r\n * @category Year Helpers\r\n * @summary List all the Saturdays and Sundays in the year.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the year.\r\n *\r\n * @param {Date|Number} date - the given year\r\n * @returns {Date[]} an array containing all the Saturdays and Sundays\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The passed date is invalid\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the year\r\n * var result = eachWeekendOfYear(new Date(2020, 1, 1))\r\n * //=> [\r\n * //   Sat Jan 03 2020 00:00:00,\r\n * //   Sun Jan 04 2020 00:00:00,\r\n * //   ...\r\n * //   Sun Dec 27 2020 00:00:00\r\n * // ]\r\n * ]\r\n */\r\n\r\nexport default function eachWeekendOfYear(dirtyDate) {\r\n  requiredArgs(1, arguments);\r\n  var startDate = startOfYear(dirtyDate);\r\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\r\n  var endDate = endOfYear(dirtyDate);\r\n  return eachWeekendOfInterval({\r\n    start: startDate,\r\n    end: endDate\r\n  });\r\n}"],"mappings":"AAAA,OAAOA,qBAAqB,MAAM,mCAAmC;AACrE,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,iBAAiB,CAACC,SAAS,EAAE;EACnDF,YAAY,CAAC,CAAC,EAAEG,SAAS,CAAC;EAC1B,IAAIC,SAAS,GAAGN,WAAW,CAACI,SAAS,CAAC;EACtC,IAAIG,KAAK,CAACD,SAAS,CAAC,EAAE,MAAM,IAAIE,UAAU,CAAC,4BAA4B,CAAC;EACxE,IAAIC,OAAO,GAAGR,SAAS,CAACG,SAAS,CAAC;EAClC,OAAOL,qBAAqB,CAAC;IAC3BW,KAAK,EAAEJ,SAAS;IAChBK,GAAG,EAAEF;EACP,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}