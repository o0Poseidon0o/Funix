{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n\n/**\r\n * @name formatISO9075\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {Object} [options] - an object with options.\r\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\r\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\r\n * @returns {String} the formatted date string\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\r\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18 19:00:52'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075, short format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918 190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, date only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, time only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52'\r\n */\nexport default function formatISO9075(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n  var originalDate = toDate(dirtyDate);\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n  if (representation !== 'date') {\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n  return result;\n}","map":{"version":3,"names":["toDate","isValid","addLeadingZeros","formatISO9075","dirtyDate","dirtyOptions","arguments","length","TypeError","concat","originalDate","RangeError","options","format","String","representation","result","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","separator"],"sources":["C:/Users/POSEIDON/Desktop/Funix/Fnuix/RJS301x_1.0-A_VN/Assignment01/node_modules/date-fns/esm/formatISO9075/index.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport isValid from \"../isValid/index.js\";\r\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\r\n\r\n/**\r\n * @name formatISO9075\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {Object} [options] - an object with options.\r\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\r\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\r\n * @returns {String} the formatted date string\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\r\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18 19:00:52'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075, short format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918 190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, date only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, time only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52'\r\n */\r\nexport default function formatISO9075(dirtyDate, dirtyOptions) {\r\n  if (arguments.length < 1) {\r\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\r\n  }\r\n\r\n  var originalDate = toDate(dirtyDate);\r\n\r\n  if (!isValid(originalDate)) {\r\n    throw new RangeError('Invalid time value');\r\n  }\r\n\r\n  var options = dirtyOptions || {};\r\n  var format = options.format == null ? 'extended' : String(options.format);\r\n  var representation = options.representation == null ? 'complete' : String(options.representation);\r\n\r\n  if (format !== 'extended' && format !== 'basic') {\r\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\r\n  }\r\n\r\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\r\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\r\n  }\r\n\r\n  var result = '';\r\n  var dateDelimiter = format === 'extended' ? '-' : '';\r\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\r\n\r\n  if (representation !== 'time') {\r\n    var day = addLeadingZeros(originalDate.getDate(), 2);\r\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\r\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\r\n\r\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\r\n  } // Representation is either 'time' or 'complete'\r\n\r\n\r\n  if (representation !== 'date') {\r\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\r\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\r\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\r\n\r\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\r\n\r\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\r\n  }\r\n\r\n  return result;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}