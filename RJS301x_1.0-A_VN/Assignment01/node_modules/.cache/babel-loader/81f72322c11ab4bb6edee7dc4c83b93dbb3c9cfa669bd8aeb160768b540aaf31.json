{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - `max` function now accepts an array of dates rather than spread arguments.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *   var date1 = new Date(1989, 6, 10)\r\n *   var date2 = new Date(1987, 1, 11)\r\n *   var maxDate = max(date1, date2)\r\n *\r\n *   // v2.0.0 onward:\r\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\r\n *   var maxDate = max(dates)\r\n *   ```\r\n *\r\n * @param {Date[]|Number[]} datesArray - the dates to compare\r\n * @returns {Date} the latest of the dates\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * var result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\n\nexport default function max(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","map":{"version":3,"names":["toDate","requiredArgs","max","dirtyDatesArray","arguments","datesArray","forEach","Array","prototype","slice","call","Date","NaN","result","dirtyDate","currentDate","undefined","isNaN","Number"],"sources":["C:/Users/POSEIDON/Desktop/Funix/Fnuix/RJS301x_1.0-A_VN/Assignment01/node_modules/date-fns/esm/max/index.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - `max` function now accepts an array of dates rather than spread arguments.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *   var date1 = new Date(1989, 6, 10)\r\n *   var date2 = new Date(1987, 1, 11)\r\n *   var maxDate = max(date1, date2)\r\n *\r\n *   // v2.0.0 onward:\r\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\r\n *   var maxDate = max(dates)\r\n *   ```\r\n *\r\n * @param {Date[]|Number[]} datesArray - the dates to compare\r\n * @returns {Date} the latest of the dates\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * var result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\r\n\r\nexport default function max(dirtyDatesArray) {\r\n  requiredArgs(1, arguments);\r\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\r\n\r\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\r\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\r\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\r\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\r\n  } else {\r\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\r\n    return new Date(NaN);\r\n  }\r\n\r\n  var result;\r\n  datesArray.forEach(function (dirtyDate) {\r\n    var currentDate = toDate(dirtyDate);\r\n\r\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\r\n      result = currentDate;\r\n    }\r\n  });\r\n  return result || new Date(NaN);\r\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,GAAG,CAACC,eAAe,EAAE;EAC3CF,YAAY,CAAC,CAAC,EAAEG,SAAS,CAAC;EAC1B,IAAIC,UAAU,CAAC,CAAC;;EAEhB,IAAIF,eAAe,IAAI,OAAOA,eAAe,CAACG,OAAO,KAAK,UAAU,EAAE;IACpED,UAAU,GAAGF,eAAe,CAAC,CAAC;EAChC,CAAC,MAAM,IAAI,OAAOA,eAAe,KAAK,QAAQ,IAAIA,eAAe,KAAK,IAAI,EAAE;IAC1EE,UAAU,GAAGE,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACP,eAAe,CAAC;EAC1D,CAAC,MAAM;IACL;IACA,OAAO,IAAIQ,IAAI,CAACC,GAAG,CAAC;EACtB;EAEA,IAAIC,MAAM;EACVR,UAAU,CAACC,OAAO,CAAC,UAAUQ,SAAS,EAAE;IACtC,IAAIC,WAAW,GAAGf,MAAM,CAACc,SAAS,CAAC;IAEnC,IAAID,MAAM,KAAKG,SAAS,IAAIH,MAAM,GAAGE,WAAW,IAAIE,KAAK,CAACC,MAAM,CAACH,WAAW,CAAC,CAAC,EAAE;MAC9EF,MAAM,GAAGE,WAAW;IACtB;EACF,CAAC,CAAC;EACF,OAAOF,MAAM,IAAI,IAAIF,IAAI,CAACC,GAAG,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}